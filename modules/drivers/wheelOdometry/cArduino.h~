#include <iostream>
#include <string>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <termios.h>
#include <chrono>
#include <thread>

#define _POSIX_SOURCE 1

class serial{
public:

char* findArduino() {
	char  dir [] = "/dev/serial/by-id/";

	DIR *d=opendir(dir);

	if(d == NULL) //Couldn't open directory
	return 0;

	struct dirent *de=NULL;
	while(de = readdir(d))
	{
		if(strstr(de->d_name,"arduino")!=0)
		{
			char s[PATH_MAX+1];
			sprintf(s,"%s%s",dir,de->d_name);

			char buf[1024];
			int len;
			if ((len = readlink(s, buf, sizeof(buf)-1)) != -1)
			   buf[len] = '\0';

			MODEMDEVICE=new char[PATH_MAX+1];
			realpath(s, MODEMDEVICE);

			closedir(d);
			return  MODEMDEVICE;
		}
	}

	closedir(d);
	return 0;
}


void init(){
    fd = open(findArduino(), O_RDWR | O_NOCTTY );
    if (fd <0) { exit(-1); } 
    // Improvement No. 1 I save old setting and clean the new one 
    tcgetattr(fd,&oldtio);
    bzero(&newtio, sizeof(newtio));

    // Here I set all the flags to vars at once
    newtio.c_cflag = B9600 | CRTSCTS | CS8 | CLOCAL | CREAD;
    newtio.c_iflag = IGNPAR | ICRNL;
    newtio.c_oflag = 0;
    newtio.c_lflag = ICANON;
    //here I set some new flags..
    newtio.c_cc[VINTR]    = 0;     /* Ctrl-c */
    newtio.c_cc[VQUIT]    = 0;     /* Ctrl-\ */
    newtio.c_cc[VERASE]   = 0;     /* del */
    newtio.c_cc[VKILL]    = 0;     /* @ */
    newtio.c_cc[VEOF]     = 4;     /* Ctrl-d */
    newtio.c_cc[VTIME]    = 1;     /* inter-character timer unused */
    newtio.c_cc[VMIN]     = 0;     /* blocking read until 1 character  arrives */
    newtio.c_cc[VSWTC]    = 0;     /* '\0' */
    newtio.c_cc[VSTART]   = 0;     /* Ctrl-q */
    newtio.c_cc[VSTOP]    = 0;     /* Ctrl-s */
    newtio.c_cc[VSUSP]    = 0;     /* Ctrl-z */
    newtio.c_cc[VEOL]     = 0;     /* '\0' */
    newtio.c_cc[VREPRINT] = 0;     /* Ctrl-r */
    newtio.c_cc[VDISCARD] = 0;     /* Ctrl-u */
    newtio.c_cc[VWERASE]  = 0;     /* Ctrl-w */
    newtio.c_cc[VLNEXT]   = 0;     /* Ctrl-v */
    newtio.c_cc[VEOL2]    = 0;     /* '\0' */
    // and I finally save the settings 
    tcflush(fd, TCIFLUSH);
    tcsetattr(fd,TCSANOW,&newtio);
}

~serial(){
    close(fd);
}

      void flushArd(int i){
       tcflush(fd, TCIFLUSH);
	std::this_thread::sleep_for(std::chrono::milliseconds(i));
      }
    std::string sread(){
      //  tcflush(fd, TCIFLUSH);
//	std::this_thread::sleep_for(std::chrono::milliseconds(5));
	res = read(fd,buf,255);
        buf[res]=0;
        return buf;
    }
    void swrite(const char* input){
        write(fd,input,sizeof(input));
    }
private:
    int fd,c,res;
    struct termios oldtio,newtio;
    char buf[255];
char *MODEMDEVICE =0;
};
